# continous
# x=runif(cov.num,0,1)
# discrete
x=rbinom(cov.num,1,0.5)
# environment
e=rbinom(num,1,pr_e)
# genotype data
# gs=sample(c(0,0.5,1),num,replace=T,prob=c((1-maf)^2,2*maf*(1-maf),maf^2))
gs=sample(c(0,0.5,1),num,replace=T,prob=c((1-maf[hh])^2,2*maf[hh]*(1-maf[hh]),maf[hh]^2))
g1=gs
g1[which(gs==0.5)]=0
pr1=exp(beta_0+beta_1*x+beta_2*e+beta_3*g1+beta_4*g1*e)/(1+exp(beta_0+beta_1*x+beta_2*e+beta_3*g1+beta_4*g1*e))
y1=rep(NA,num)
for(ii21 in 1:num){
y1[ii21]=rbinom(1,1,pr1[ii21])
}
data1=cbind(y1,x,e,gs)
# case & control
ind1=which(y1==0)
snp.control=data1[ind1[1:n.control],]
ind21=which(y1==1)
snp.case=data1[ind21[1:n.case],]
snpsim=rbind(snp.control,snp.case)
data_y=snpsim[,1]
data_x=snpsim[,2:4]
data_x=as.data.frame(data_x)
if(length(which(data_x[,3]==1))>1){
# dummy variable
z=matrix(0,nrow=n.case+n.control,ncol=2)
z[which(data_x[,3]==0.5),2]=1
z[which(data_x[,3]==1),1]=1
data_xnew=cbind(data_x[,1],data_x[,2],z,z[,1]*data_x[,2],z[,2]*data_x[,2])
data_xnew=as.data.frame(data_xnew)
data_xnew2=cbind(data_x[,1],data_x[,2],data_x[,3],data_x[,3]*data_x[,2])
data_xnew2=as.data.frame(data_xnew2)
cova=data_xnew[,1]
eex=data_xnew[,2]
dum1=data_xnew[,3]
dum2=data_xnew[,4]
dum1e=data_xnew[,5]
dum2e=data_xnew[,6]
# obtain MLE
################################ test interaction term ##########################################
glm.sim2=glm(data_y~data_xnew2[,1]+data_xnew2[,2]+data_xnew2[,3],data=data_xnew2,family="binomial")
beta_0est2=summary(glm.sim2)$coefficients[1,1]
beta_1est2=summary(glm.sim2)$coefficients[2,1]
beta_2est2=summary(glm.sim2)$coefficients[3,1]
beta_3est2=summary(glm.sim2)$coefficients[4,1]
smaxtem=c()
for(kk in 1:length(theta)){
datafra=data.frame(cova,eex,(dum1+theta[kk]*dum2))
glm.sim=glm(data_y~datafra[,1]+datafra[,2]+datafra[,3],data=datafra,family="binomial")
beta_0est=summary(glm.sim)$coefficients[1,1]
beta_1est=summary(glm.sim)$coefficients[2,1]
beta_2est=summary(glm.sim)$coefficients[3,1]
beta_3est=summary(glm.sim)$coefficients[4,1]
# Score function
scor=sum(data_y*(dum1e+theta[kk]*dum2e)-exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*(dum1e+theta[kk]*dum2e)/(1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)))
# Informatic metric
I11=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I22=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*(cova^2)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I33=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*(eex^2)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I44=sum(((dum1+theta[kk]*dum2)^2)*exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I55=sum(((dum1e+theta[kk]*dum2e)^2)*exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I12=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*cova/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I13=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*eex/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I14=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*(dum1+theta[kk]*dum2)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I15=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*(dum1e+theta[kk]*dum2e)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I23=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*cova*eex/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I24=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*cova*(dum1+theta[kk]*dum2)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I25=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*cova*(dum1e+theta[kk]*dum2e)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I34=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*eex*(dum1+theta[kk]*dum2)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I35=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*eex*(dum1e+theta[kk]*dum2e)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
I45=sum(exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2)*(dum1+theta[kk]*dum2)*(dum1e+theta[kk]*dum2e)/((1+exp(beta_0est+beta_1est*cova+beta_2est*eex+beta_3est*dum1+theta[kk]*beta_3est*dum2))^2))
fm=matrix(NA,nrow=5,ncol=5)
fm[1,1]=I11
fm[2,2]=I22
fm[3,3]=I33
fm[4,4]=I44
fm[5,5]=I55
fm[1,2]=I12
fm[1,3]=I13
fm[1,4]=I14
fm[1,5]=I15
fm[2,3]=I23
fm[2,4]=I24
fm[2,5]=I25
fm[3,4]=I34
fm[3,5]=I35
fm[4,5]=I45
for(i in 1:5){
for(j in 1:5){
fm[j,i]=fm[i,j]
}
}
fminv=solve(fm)
smaxtem[kk]=(scor^2)*fminv[5,5]
}
# MAX statistic
smax[bbb]=max(smaxtem)
# tradition
# score function
score_tra=sum(data_y*data_x[,2]*data_x[,3]-(exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])*data_x[,2]*data_x[,3]/(1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))))
# Fisher infor
I11_tra=sum(exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I22_tra=sum((data_x[,1]^2)*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I33_tra=sum((data_x[,2]^2)*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I44_tra=sum((data_x[,3]^2)*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I55_tra=sum(((data_x[,2]*data_x[,3])^2)*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I12_tra=sum(data_x[,1]*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I13_tra=sum(data_x[,2]*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I14_tra=sum(data_x[,3]*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I15_tra=sum((data_x[,2]*data_x[,3])*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I23_tra=sum((data_x[,1]*data_x[,2])*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I24_tra=sum((data_x[,1]*data_x[,3])*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I25_tra=sum((data_x[,1]*data_x[,2]*data_x[,3])*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I34_tra=sum((data_x[,2]*data_x[,3])*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I35_tra=sum((data_x[,2]*data_x[,2]*data_x[,3])*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
I45_tra=sum((data_x[,3]*data_x[,2]*data_x[,3])*exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3])/((1+exp(beta_0est2+beta_1est2*data_x[,1]+beta_2est2*data_x[,2]+beta_3est2*data_x[,3]))^2))
fm_tra=matrix(NA,nrow=5,ncol=5)
fm_tra[1,1]=I11_tra
fm_tra[2,2]=I22_tra
fm_tra[3,3]=I33_tra
fm_tra[4,4]=I44_tra
fm_tra[5,5]=I55_tra
fm_tra[1,2]=I12_tra
fm_tra[1,3]=I13_tra
fm_tra[1,4]=I14_tra
fm_tra[1,5]=I15_tra
fm_tra[2,3]=I23_tra
fm_tra[2,4]=I24_tra
fm_tra[2,5]=I25_tra
fm_tra[3,4]=I34_tra
fm_tra[3,5]=I35_tra
fm_tra[4,5]=I45_tra
for(i in 1:5){
for(j in 1:5){
fm_tra[j,i]=fm_tra[i,j]
}
}
fminv_tra=solve(fm_tra)
sc[bbb]=(score_tra^2)*fminv_tra[5,5]
################################# test global term ################################################
# glm.sim=glm(data_y~data_xnew2[,1],data=data_xnew2,family="binomial")
# beta_0est=summary(glm.sim)$coefficients[1,1]
# beta_1est=summary(glm.sim)$coefficients[2,1]
#
#
# smaxtem=c()
#
# for(kk in 1:length(theta)){
#   # Score function
#
#   scor=matrix(NA,nrow=3,ncol=1)
#   scor[1,1]=sum(data_y*eex-exp(beta_0est+beta_1est*cova)*eex/(1+exp(beta_0est+beta_1est*cova)))
#   scor[2,1]=sum(data_y*(dum1+theta[kk]*dum2)-exp(beta_0est+beta_1est*cova)*(dum1+theta[kk]*dum2)/(1+exp(beta_0est+beta_1est*cova)))
#   scor[3,1]=sum(data_y*(dum1e+theta[kk]*dum2e)-exp(beta_0est+beta_1est*cova)*(dum1e+theta[kk]*dum2e)/(1+exp(beta_0est+beta_1est*cova)))
#
#   # Informatic metric
#
#   I11=sum(exp(beta_0est+beta_1est*cova)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I22=sum(exp(beta_0est+beta_1est*cova)*(cova^2)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I33=sum(exp(beta_0est+beta_1est*cova)*(eex^2)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I44=sum(((dum1+theta[kk]*dum2)^2)*exp(beta_0est+beta_1est*cova)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I55=sum(((dum1e+theta[kk]*dum2e)^2)*exp(beta_0est+beta_1est*cova)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I12=sum(exp(beta_0est+beta_1est*cova)*cova/((1+exp(beta_0est+beta_1est*cova))^2))
#   I13=sum(exp(beta_0est+beta_1est*cova)*eex/((1+exp(beta_0est+beta_1est*cova))^2))
#   I14=sum(exp(beta_0est+beta_1est*cova)*(dum1+theta[kk]*dum2)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I15=sum(exp(beta_0est+beta_1est*cova)*(dum1e+theta[kk]*dum2e)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I23=sum(exp(beta_0est+beta_1est*cova)*cova*eex/((1+exp(beta_0est+beta_1est*cova))^2))
#   I24=sum(exp(beta_0est+beta_1est*cova)*cova*(dum1+theta[kk]*dum2)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I25=sum(exp(beta_0est+beta_1est*cova)*cova*(dum1e+theta[kk]*dum2e)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I34=sum(exp(beta_0est+beta_1est*cova)*eex*(dum1+theta[kk]*dum2)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I35=sum(exp(beta_0est+beta_1est*cova)*eex*(dum1e+theta[kk]*dum2e)/((1+exp(beta_0est+beta_1est*cova))^2))
#   I45=sum(exp(beta_0est+beta_1est*cova)*(dum1+theta[kk]*dum2)*(dum1e+theta[kk]*dum2e)/((1+exp(beta_0est+beta_1est*cova))^2))
#
#   fm=matrix(NA,nrow=5,ncol=5)
#   fm[1,1]=I11
#   fm[2,2]=I22
#   fm[3,3]=I33
#   fm[4,4]=I44
#   fm[5,5]=I55
#   fm[1,2]=I12
#   fm[1,3]=I13
#   fm[1,4]=I14
#   fm[1,5]=I15
#   fm[2,3]=I23
#   fm[2,4]=I24
#   fm[2,5]=I25
#   fm[3,4]=I34
#   fm[3,5]=I35
#   fm[4,5]=I45
#
#   for(i in 1:5){
#     for(j in 1:5){
#       fm[j,i]=fm[i,j]
#     }
#   }
#   fminv=solve(fm)
#
#   smaxtem[kk]=t(scor)%*%fminv[3:5,3:5]%*%scor
#
# }
# # MAX statistic
#
# smax[bbb]=max(smaxtem)
#
# # tradition
#
# # score function
#
# score_tra=matrix(NA,nrow=3,ncol=1)
# score_tra[1,1]=sum(data_y*data_x[,2]-(exp(beta_0est+beta_1est*data_x[,1])*data_x[,2]/(1+exp(beta_0est+beta_1est*data_x[,1]))))
# score_tra[2,1]=sum(data_y*data_x[,3]-(exp(beta_0est+beta_1est*data_x[,1])*data_x[,3]/(1+exp(beta_0est+beta_1est*data_x[,1]))))
# score_tra[3,1]=sum(data_y*data_x[,2]*data_x[,3]-(exp(beta_0est+beta_1est*data_x[,1])*data_x[,2]*data_x[,3]/(1+exp(beta_0est+beta_1est*data_x[,1]))))
#
# # Fisher infor
#
# I11_tra=sum(exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I22_tra=sum((data_x[,1]^2)*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I33_tra=sum((data_x[,2]^2)*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I44_tra=sum((data_x[,3]^2)*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I55_tra=sum(((data_x[,2]*data_x[,3])^2)*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I12_tra=sum(data_x[,1]*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I13_tra=sum(data_x[,2]*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I14_tra=sum(data_x[,3]*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I15_tra=sum((data_x[,2]*data_x[,3])*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I23_tra=sum((data_x[,1]*data_x[,2])*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I24_tra=sum((data_x[,1]*data_x[,3])*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I25_tra=sum((data_x[,1]*data_x[,2]*data_x[,3])*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I34_tra=sum((data_x[,2]*data_x[,3])*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I35_tra=sum((data_x[,2]*data_x[,2]*data_x[,3])*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
# I45_tra=sum((data_x[,3]*data_x[,2]*data_x[,3])*exp(beta_0est+beta_1est*data_x[,1])/((1+exp(beta_0est+beta_1est*data_x[,1]))^2))
#
# fm_tra=matrix(NA,nrow=5,ncol=5)
# fm_tra[1,1]=I11_tra
# fm_tra[2,2]=I22_tra
# fm_tra[3,3]=I33_tra
# fm_tra[4,4]=I44_tra
# fm_tra[5,5]=I55_tra
# fm_tra[1,2]=I12_tra
# fm_tra[1,3]=I13_tra
# fm_tra[1,4]=I14_tra
# fm_tra[1,5]=I15_tra
# fm_tra[2,3]=I23_tra
# fm_tra[2,4]=I24_tra
# fm_tra[2,5]=I25_tra
# fm_tra[3,4]=I34_tra
# fm_tra[3,5]=I35_tra
# fm_tra[4,5]=I45_tra
# for(i in 1:5){
#   for(j in 1:5){
#     fm_tra[j,i]=fm_tra[i,j]
#   }
# }
#
# fminv_tra=solve(fm_tra)
# sc[bbb]=t(score_tra)%*%fminv_tra[3:5,3:5]%*%score_tra
}
}
# proc.time()-ptm
# calculate power (interaction)
if(length(which(is.na(smax)))==0 & length(which(is.na(sc)))==0){
power.smax=length(which(smax>=scv))/itertem
power.sc=length(which(sc>=qchisq(1-alpha,1)))/itertem
}else{
power.smax=length(which(smax[-which(is.na(smax))]>=scv))/length(smax[-which(is.na(smax))])
power.sc=length(which(sc[-which(is.na(sc))]>=qchisq(1-alpha,1)))/length(sc[-which(is.na(sc))])
}
# # calculate power (global)
#
# if(length(which(is.na(smax)))==0 & length(which(is.na(sc)))==0){
#
#   power.smax=length(which(smax>=scv))/itertem
#   power.sc=length(which(sc>=qchisq(1-alpha,3)))/itertem
#
#
# }else{
#
#   power.smax=length(which(smax[-which(is.na(smax))]>=scv))/length(smax[-which(is.na(smax))])
#   power.sc=length(which(sc[-which(is.na(sc))]>=qchisq(1-alpha,3)))/length(sc[-which(is.na(sc))])
#
# }
result[1,hh]=power.smax
result[2,hh]=power.sc
}
proc.time()-ptm
save.image("C:/Users/o0/Desktop/huxiaon/1112.RData")
setwd("C:/Users/o0/Desktop/ordinal data/simulation/Combi_ordinal")
#### Need all functions defined in COBOT-analysis.r
source("cobot-analysis.r")
#### Function for simulating data
generate.data = function(alphax, betax, alphay, betay, eta, N) {
z = rnorm(N,0,1)
x = y = numeric(N)
## px is an N x length(alphax) matrix.
## Each row has the TRUE cummulative probabilities for each subject.
px = (1 + exp(- outer(alphax, betax*z, "+"))) ^ (-1)
aa = runif(N)
for(i in 1:N)
x[i] = sum(aa[i] > px[,i])
x = as.numeric(as.factor(x))
py = (1 + exp(- outer(alphay, betay*z+eta[x], "+"))) ^ (-1)
aa = runif(N)
for(i in 1:N)
y[i] = sum(aa[i] > py[,i])
y = as.numeric(as.factor(y))
## y = y+1 may have category gaps if there are small probability categories.
return(list(x=x, y=y, z=z))
}
#### Function for simulation
ordinalsim = function(alphax, betax, alphay, betay, eta, N, Nemp, NREPL) {
require(rms)
pval.emp = matrix(,NREPL,11)
for (ii in 1:NREPL) {
data = generate.data(alphax, betax, alphay, betay, eta, N)
pval.emp[ii,] = COBOT.emp(data, Nemp)
}
param = list(alpha.yz=alphay, beta.yz=betay,
alpha.xz=alphax, beta.xz=betax, eta=eta,
N=N, Nemp=Nemp, Nrepl=NREPL)
list(par= param, pval = pval.emp)
}
#### Start simulations
ptm=proc.time()
N = 500
Nemp = 1000
NREPL = 1000
# 1. X_5. Y_4
alphay = c(-1, 0, 1)
betay = -0.5
alphax = c(-1, 0, 1, 2)
betax = 1
eta0 = rep(0,5)
eta1 = 0.1 * (-2:2)
eta2= c(-.3, .18, .20, .22, .24)
eta3 = c(-0.25,0,0.2,0,-0.15)
# #null distribution
sim0s = ordinalsim(alphax, betax, alphay, betay, eta0, N, Nemp, NREPL)
proc.time()-ptm
##Computer Type I error and power
library(xlsx)
p=0.05
alpha<-apply(sim0s$pval<p,2,mean,rm.na=T)
setwd("J:/Onedirve/OneDrive/Documents/result/cob2/X_5_Y_4")
write.xlsx(x = alpha, file = "result_alpha.xlsx",
sheetName = "result", row.names =F,col.names = F)
require(rms)
install.packages("SparseM")
setwd("C:/Users/o0/Desktop/ordinal data/simulation/Combi_ordinal")
#### Need all functions defined in COBOT-analysis.r
source("cobot-analysis.r")
#### Function for simulating data
generate.data = function(alphax, betax, alphay, betay, eta, N) {
z = rnorm(N,0,1)
x = y = numeric(N)
## px is an N x length(alphax) matrix.
## Each row has the TRUE cummulative probabilities for each subject.
px = (1 + exp(- outer(alphax, betax*z, "+"))) ^ (-1)
aa = runif(N)
for(i in 1:N)
x[i] = sum(aa[i] > px[,i])
x = as.numeric(as.factor(x))
py = (1 + exp(- outer(alphay, betay*z+eta[x], "+"))) ^ (-1)
aa = runif(N)
for(i in 1:N)
y[i] = sum(aa[i] > py[,i])
y = as.numeric(as.factor(y))
## y = y+1 may have category gaps if there are small probability categories.
return(list(x=x, y=y, z=z))
}
#### Function for simulation
ordinalsim = function(alphax, betax, alphay, betay, eta, N, Nemp, NREPL) {
require(rms)
pval.emp = matrix(,NREPL,11)
for (ii in 1:NREPL) {
data = generate.data(alphax, betax, alphay, betay, eta, N)
pval.emp[ii,] = COBOT.emp(data, Nemp)
}
param = list(alpha.yz=alphay, beta.yz=betay,
alpha.xz=alphax, beta.xz=betax, eta=eta,
N=N, Nemp=Nemp, Nrepl=NREPL)
list(par= param, pval = pval.emp)
}
#### Start simulations
ptm=proc.time()
N = 500
Nemp = 1000
NREPL = 1000
# 1. X_5. Y_4
alphay = c(-1, 0, 1)
betay = -0.5
alphax = c(-1, 0, 1, 2)
betax = 1
eta0 = rep(0,5)
eta1 = 0.1 * (-2:2)
eta2= c(-.3, .18, .20, .22, .24)
eta3 = c(-0.25,0,0.2,0,-0.15)
# #null distribution
sim0s = ordinalsim(alphax, betax, alphay, betay, eta0, N, Nemp, NREPL)
proc.time()-ptm
##Computer Type I error and power
library(xlsx)
p=0.05
alpha<-apply(sim0s$pval<p,2,mean,rm.na=T)
setwd("J:/Onedirve/OneDrive/Documents/result/cob2/X_5_Y_4")
write.xlsx(x = alpha, file = "result_alpha.xlsx",
sheetName = "result", row.names =F,col.names = F)
setwd("J:/Onedirve/OneDrive/Documents/result/cob2/X_5_Y_4")
alpha<- read.xlsx(file = "result_alpha.xlsx",1,header = F)
beta1<-read.xlsx(file = "result_b1.xlsx",1,header = F)
beta2<-read.xlsx(file = "result_b2.xlsx",1,header = F)
beta3<-read.xlsx(file = "result_b3.xlsx",1,header = F)
result<-cbind(alpha,beta1,beta2,beta3)
rownames(result)=c("T1emp", "T2emp", "T3emp","Cob2","Cob4","min2","min4",
"Y~X linear","Y~X catego","X~Y linear","X~Y catego")
colnames(result)=c("Null","Linear","Nonlinear","Nonmontonic")
write.xlsx(x = result, file = "C:/Users/o0/Desktop/ordinal data/simulation/Combi_ordinal/result/result.xlsx",
sheetName = "result", row.names =TRUE,col.names = TRUE)
setwd("C:/Users/o0/Desktop/ordinal data/simulation/Combi_ordinal/result/")
data<-read.xlsx("new/result54-2.xlsx",1)
re=data[3:13,3:7]
apply(re,1,function(x){paste(collapse = " & ",x)})
write.table(re, file = "f.txt", sep = "&", row.names=FALSE, col.names=FALSE,quote = F)
# # 1. X_5. Y_4
# alphay = c(-1, 0, 1)
# betay = -.5
# alphax = c(-1, 0, 1, 2)
setwd("C:/Users/o0/Desktop/ordinal data/simulation/Combi_ordinal")
#### Need all functions defined in COBOT-analysis.r
source("cobot-analysis.r")
#### Function for simulating data
generate.data = function(alphax, betax, alphay, betay, eta, N) {
z = rnorm(N,0,1)
x = y = numeric(N)
## px is an N x length(alphax) matrix.
## Each row has the TRUE cummulative probabilities for each subject.
px = (1 + exp(- outer(alphax, betax*z, "+"))) ^ (-1)
aa = runif(N)
for(i in 1:N)
x[i] = sum(aa[i] > px[,i])
x = as.numeric(as.factor(x))
py = (1 + exp(- outer(alphay, betay*z+eta[x], "+"))) ^ (-1)
aa = runif(N)
for(i in 1:N)
y[i] = sum(aa[i] > py[,i])
y = as.numeric(as.factor(y))
## y = y+1 may have category gaps if there are small probability categories.
return(list(x=x, y=y, z=z))
}
#### Function for simulation
ordinalsim = function(alphax, betax, alphay, betay, eta, N, Nemp, NREPL) {
require(rms)
pval.emp = matrix(,NREPL,11)
for (ii in 1:NREPL) {
data = generate.data(alphax, betax, alphay, betay, eta, N)
pval.emp[ii,] = COBOT.emp(data, Nemp)
}
param = list(alpha.yz=alphay, beta.yz=betay,
alpha.xz=alphax, beta.xz=betax, eta=eta,
N=N, Nemp=Nemp, Nrepl=NREPL)
list(par= param, pval = pval.emp)
}
#### Start simulations
ptm=proc.time()
N = 500
Nemp = 1000
NREPL = 1000
# 1. X_5. Y_4
alphay = c(-1, 0, 1)
betay = -0.5
alphax = c(-1, 0, 1, 2)
betax = 1
eta0 = rep(0,5)
eta1 =c(-0.3,-0.15,0,0.15,0.3)
eta2= c(-0.21,-0.18,0.10,0.22,0.24)
eta3 = c(-0.35,0.4,0.2,0,-0.15)
# #null distribution
sim0s = ordinalsim(alphax, betax, alphay, betay, eta0, N, Nemp, NREPL)
proc.time()-ptm
##Computer Type I error and power
library(xlsx)
p=0.05
alpha<-apply(sim0s$pval<p,2,mean,rm.na=T)
setwd("J:/Onedirve/OneDrive/Documents/result/cob2/X_5_Y_4")
write.xlsx(x = alpha, file = "result_alpha.xlsx",
sheetName = "result", row.names =F,col.names = F)
setwd("J:/Onedirve/OneDrive/Documents/result/cob2/X_5_Y_4")
alpha<- read.xlsx(file = "result_alpha.xlsx",1,header = F)
beta1<-read.xlsx(file = "result_b1.xlsx",1,header = F)
beta2<-read.xlsx(file = "result_b2.xlsx",1,header = F)
beta3<-read.xlsx(file = "result_b3.xlsx",1,header = F)
result<-cbind(alpha,beta1,beta2,beta3)
rownames(result)=c("T1emp", "T2emp", "T3emp","Cob2","Cob4","min2","min4",
"Y~X linear","Y~X catego","X~Y linear","X~Y catego")
colnames(result)=c("Null","Linear","Nonlinear","Nonmontonic")
write.xlsx(x = result, file = "C:/Users/o0/Desktop/ordinal data/simulation/Combi_ordinal/result/result.xlsx",
sheetName = "result", row.names =TRUE,col.names = TRUE)
setwd("C:/Users/o0/Desktop/ordinal data/simulation/Combi_ordinal/result/")
data<-read.xlsx("new/result54-2.xlsx",1)
re=data[3:13,3:7]
apply(re,1,function(x){paste(collapse = " & ",x)})
write.table(re, file = "f.txt", sep = "&", row.names=FALSE, col.names=FALSE,quote = F)
# # 1. X_5. Y_4
# alphay = c(-1, 0, 1)
setwd("C:/Users/o0/Desktop/ordinal data/simulation/Combi_ordinal/result/")
data<-read.xlsx("new/result54-3.xlsx",1)
re=data[3:13,3:7]
apply(re,1,function(x){paste(collapse = " & ",x)})
write.table(re, file = "f.txt", sep = "&", row.names=FALSE, col.names=FALSE,quote = F)
# # 1. X_5. Y_4
# alphay = c(-1, 0, 1)
